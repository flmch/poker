
var testCard = require('../../src/utiljs/card');
var testRank = require('../../src/utiljs/rank');

var CardModule = testCard.CardModule;
var RankModule = testRank.RankModule;
var toCardArr = CardModule.toCardArr;

describe('rank', function(){
	it('should sort seven card according to value', function(){
		var sortCard = RankModule.sortCard;
		var original = toCardArr([ 'SA', 'ST', 'S2', 'SK', 'S5', 'S7', 'S8' ]);
		var sorted = toCardArr([ 'SA', 'SK', 'ST', 'S8', 'S7', 'S5', 'S2' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'SA', 'SA', 'SA', 'SA', 'SA']);
		sorted = toCardArr([ 'SA', 'SA', 'SA', 'SA', 'SA']);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'SA', 'S2', 'S3', 'S4', 'S5', 'S5', 'S5' ]);
		sorted = toCardArr([ 'SA', 'S5', 'S5', 'S5', 'S4', 'S3', 'S2' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'S9', 'S8', 'ST', 'S3', 'SK', 'S5', 'SA' ]);
		sorted = toCardArr([ 'SA', 'SK', 'ST', 'S9', 'S8', 'S5', 'S3' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'S9', 'S8', 'C9', 'S3', 'SK']);
		sorted = toCardArr([ 'SK', 'S9', 'C9', 'S8', 'S3' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'SA', 'SK', 'CA', 'CK', 'HA', 'HK', 'DA' ]);
		sorted = toCardArr([ 'SA', 'CA', 'HA', 'DA', 'SK', 'CK', 'HK' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );			
	});
	it('should return five numbers if straight exist, otherwise empty array', function(){
		var checkStraight = RankModule.checkStraight;
		var cards = toCardArr([ 'SA', 'SK', 'SQ', 'SJ', 'ST', 'CT', 'HT' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([1,13,12,11,10]) );
		cards = toCardArr([ 'CK', 'SK', 'SQ', 'SJ', 'S9', 'C9', 'H9' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'SA', 'SQ', 'HJ', 'ST', 'S9', 'C8', 'H7' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([12,11,10,9,8]) );		
		cards = toCardArr([ 'HA', 'S7', 'H7', 'S5', 'H4', 'S3', 'C2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([5,4,3,2,1]) );
		cards = toCardArr([ 'HA', 'S7', 'H6', 'S5', 'H4', 'S3', 'C2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([7,6,5,4,3]) );		
		cards = toCardArr([ 'S4', 'H4', 'S3', 'H3', 'S2', 'C2', 'H2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'HA', 'S5', 'H4', 'S3', 'H3', 'S2', 'C2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([5,4,3,2,1]) );
		cards = toCardArr([ 'SA', 'HK', 'ST', 'H4', 'S4', 'C3', 'H2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'SA']);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'HK', 'ST', 'H4', 'S4' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'HK', 'SQ', 'HJ', 'ST', 'S9' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([13,12,11,10,9]) );
		cards = toCardArr([ 'HA', 'S5', 'H4', 'S3', 'S2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([5,4,3,2,1]) );
		cards = toCardArr([ 'HA', 'S5', 'H4', 'S3', 'S2', 'H2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([5,4,3,2,1]) );
		cards = toCardArr([ 'SA', 'SK', 'SQ', 'SJ', 'ST', 'S9', 'S8' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([1,13,12,11,10]) );
	});
	it('should return array of card with max suit if flush exists, otherwise return []', function(){
		var checkFlush = RankModule.checkFlush;
		var cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'CT', 'HT']);
		var output = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(output) );
		cards = toCardArr(['SA', 'SK', 'CQ', 'SJ', 'ST', 'CT', 'HT']);
		output = toCardArr([]);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(output) );
		cards = toCardArr(['SA', 'SK', 'SQ', 'SJ']);
		output = toCardArr([]);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(output) );	
		cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		output = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(output) );
		cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'S9', 'S8']);
		output = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'S9', 'S8']);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(output) );	
	});
	it('should return straight flush if there is one', function(){
		var isStarightFlush = RankModule.isStarightFlush;
		var cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'S9', 'S8']);
		var output = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		expect( JSON.stringify(isStarightFlush(cards).cards) ).toBe( JSON.stringify(output) );
		cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'HT', 'S9', 'S8']);
		output = toCardArr([]);
		expect( JSON.stringify(isStarightFlush(cards).cards) ).toBe( JSON.stringify(output) );
		cards = toCardArr(['SA', 'S7', 'H6', 'S5', 'S4', 'S3', 'S2']);
		output = toCardArr(['SA', 'S5', 'S4', 'S3', 'S2']);
		expect( JSON.stringify(isStarightFlush(cards).cards) ).toBe( JSON.stringify(output) );
		cards = toCardArr(['SA', 'S7', 'S6', 'S5', 'S4', 'S3', 'S2']);
		output = toCardArr(['S7', 'S6', 'S5', 'S4', 'S3']);
		expect( JSON.stringify(isStarightFlush(cards).cards) ).toBe( JSON.stringify(output) );
		cards = toCardArr(['SA', 'SQ', 'S8', 'S7', 'S4', 'S3', 'S2']);
		output = toCardArr(['SA', 'SQ', 'S8', 'S7', 'S4', 'S3', 'S2']);
		expect( JSON.stringify(isStarightFlush(cards).cards) ).toBe( JSON.stringify([]) );
		expect( JSON.stringify(isStarightFlush(cards).flush) ).toBe( JSON.stringify(output) );			
	});
	it('should return four of kind if exists', function(){
		var isFourOfKind = RankModule.isFourOfKind;
		var cards = toCardArr(['SA', 'HA', 'CA', 'DA', 'ST', 'S9', 'S8']);
		var output = toCardArr(['SA', 'HA', 'CA', 'DA', 'ST']);
		expect( JSON.stringify(isFourOfKind(cards).cards) ).toBe( JSON.stringify(output) );
		expect( JSON.stringify(isFourOfKind(cards).ranker) ).toBe( JSON.stringify([1, 10]) );
		cards = toCardArr(['SA', 'CA', 'S9', 'DA', 'S8', 'HA', 'ST',]);
		output = toCardArr(['SA', 'CA', 'DA', 'HA', 'ST']);
		expect( JSON.stringify(isFourOfKind(cards).cards) ).toBe( JSON.stringify(output) );
		expect( JSON.stringify(isFourOfKind(cards).ranker) ).toBe( JSON.stringify([1, 10]) );
		cards = toCardArr([ 'CA', 'S9', 'D9', 'S8', 'H9', 'C9', 'SA']);
		output = toCardArr(['CA', 'S9', 'D9', 'H9', 'C9']);
		expect( JSON.stringify(isFourOfKind(cards).cards) ).toBe( JSON.stringify(output) );
		expect( JSON.stringify(isFourOfKind(cards).ranker) ).toBe( JSON.stringify([9, 1]) );
		cards = toCardArr([ 'S9', 'D9', 'H8', 'C9','SA', 'HA']);
		output = toCardArr(['S9']);
		expect( JSON.stringify(isFourOfKind(cards).cards) ).toBe( JSON.stringify(output) );
		expect( JSON.stringify(isFourOfKind(cards).ranker) ).toBeUndefined();						
	});
})