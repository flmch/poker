var testCard = require('../../src/utiljs/card');
var testRank = require('../../src/utiljs/rank');
var testPlayer = require('../../src/utiljs/player');
var testGame = require('../../src/utiljs/game');

var CardModule = testCard.CardModule;
var RankModule = testRank.RankModule;
var PlayerModule = testPlayer.PlayerModule;
var GameModule = testGame.GameModule;
var toCardArr = CardModule.toCardArr;

describe('rankPlayers', function(){
	beforeAll(function(){
		this.compareTwoP = RankModule.compareTwoP;
		this.rankPlayers = RankModule.rankPlayers;
		this.g = new GameModule.Game();
		this.g.addPlayer(0,'xi',100);
		this.g.addPlayer(1,'ji',100);
		this.g.addPlayer(2,'33',100);
		this.g.addPlayer(3,'33',100);
		this.g.addPlayer(4,'33',100);
		this.g.addPlayer(5,'33',100);
		this.g.addPlayer(6,'33',100);
		this.g.addPlayer(7,'33',100);
		this.g.addPlayer(8,'33',100);
		this.g.addPlayer(9,'33',100);		
	});
	it('compare two players hand properly', function(){
		this.g.players[0].assignHand(toCardArr(['SA','HA']));
		this.g.players[1].assignHand(toCardArr(['H5','HK']));
		this.g.board = { flop: toCardArr(['C9','H8','H7']), turn: toCardArr(['C8']), river: toCardArr(['H2']) };
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(1);
		this.g.players[0].assignHand(toCardArr(['SA','HK']));
		this.g.players[1].assignHand(toCardArr(['DA','HQ']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(-1);
		this.g.players[0].assignHand(toCardArr(['SA','H3']));
		this.g.players[1].assignHand(toCardArr(['DA','H5']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(0);		
		this.g.players[0].assignHand(toCardArr(['HA','C9']));
		this.g.players[1].assignHand(toCardArr(['S9','C7']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(-1);
		this.g.players[0].assignHand(toCardArr(['ST','D8']));
		this.g.players[1].assignHand(toCardArr(['HA','C9']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(-1);
		this.g.players[0].assignHand(toCardArr(['D8','D4']));
		this.g.players[1].assignHand(toCardArr(['S8','D5']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(0);
		this.g.players[0].assignHand(toCardArr(['D6','D5']));
		this.g.players[1].assignHand(toCardArr(['S8','D5']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(-1);
		this.g.players[0].assignHand(toCardArr(['D6','D5']));
		this.g.players[1].assignHand(toCardArr(['SJ','DT']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(1);
		this.g.players[0].assignHand(toCardArr(['DT','D6']));
		this.g.players[1].assignHand(toCardArr(['SJ','DT']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(1);
		this.g.players[0].assignHand(toCardArr(['DT','D6']));
		this.g.players[1].assignHand(toCardArr(['SJ','DT']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(1);
		this.g.players[0].assignHand(toCardArr(['H5','HK']));
		this.g.players[1].assignHand(toCardArr(['HA','HQ']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(1);
		this.g.players[0].assignHand(toCardArr(['H5','HK']));
		this.g.players[1].assignHand(toCardArr(['SJ','DT']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(-1);
		this.g.players[0].assignHand(toCardArr(['S9','H9']));
		this.g.players[1].assignHand(toCardArr(['S7','C7']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(-1);
		this.g.players[0].assignHand(toCardArr(['S8','D8']));
		this.g.players[1].assignHand(toCardArr(['S9','H9']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(-1);
		this.g.board = { flop: toCardArr(['HQ','HJ','HT']), turn: toCardArr(['C8']), river: toCardArr(['H2']) };
		this.g.players[0].assignHand(toCardArr(['HA','D8']));
		this.g.players[1].assignHand(toCardArr(['H9','H8']));
		expect(this.compareTwoP(this.g.board, this.g.players[0], this.g.players[1])).toBe(1);
	});
	it('rank players hands correctly', function(){
		this.g.players[0].assignHand(toCardArr(['SA','HA']));
		this.g.players[1].assignHand(toCardArr(['H5','HK']));
		this.g.players[2].assignHand(toCardArr(['D9','H9']));
		this.g.players[3].assignHand(toCardArr(['C7','D7']));
		this.g.players[4].assignHand(toCardArr(['HA','D3']));
		this.g.players[5].assignHand(toCardArr(['CA','D4']));
		this.g.players[6].assignHand(toCardArr(['DA','D5']));
		this.g.players[7].assignHand(toCardArr(['DJ','DT']));
		this.g.players[8].assignHand(toCardArr(['CJ','CT']));
		this.g.players[9].assignHand(toCardArr(['HT','C6']));
		this.g.board = { flop: toCardArr(['C9','H8','H7']), turn: toCardArr(['C8']), river: toCardArr(['H2']) };
		var output = this.rankPlayers(this.g.board, this.g.players);
		expect(JSON.stringify(output)).toBe(JSON.stringify( [[2],[3],[1],[7,8],[9],[0],[4,5,6]] ));
		// ------------------------------------------------------------------
		this.g.board = { flop: toCardArr(['S6','S5','S4']), turn: toCardArr(['S3']), river: toCardArr(['S2']) };
		output = this.rankPlayers(this.g.board, this.g.players);
		expect(JSON.stringify(output)).toBe(JSON.stringify( [[0,1,2,3,4,5,6,7,8,9]] ));
		// ------------------------------------------------------------------
		this.g.players[0].assignHand(toCardArr(['HA','DK']));
		this.g.players[1].assignHand(toCardArr(['D6','S6']));
		this.g.players[2].assignHand(toCardArr(['HQ','CT']));
		this.g.players[3].assignHand(toCardArr(['HT','S2']));
		this.g.players[4].assignHand(toCardArr(['H5','S4']));
		this.g.board = { flop: toCardArr(['H9','H8','H7']), turn: toCardArr(['H6']), river: toCardArr(['C6']) };
		output = this.rankPlayers(this.g.board, this.g.players.slice(0,5));
		expect(JSON.stringify(output)).toBe(JSON.stringify( [[3],[4],[1],[0],[2]] ));
		// ------------------------------------------------------------------
		this.g.players[0].assignHand(toCardArr(['HA','D2']));
		this.g.players[1].assignHand(toCardArr(['DA','D3']));
		this.g.players[2].assignHand(toCardArr(['CA','D4']));
		this.g.players[3].assignHand(toCardArr(['SA','C2']));
		this.g.players[4].assignHand(toCardArr(['HK','D8']));
		this.g.board = { flop: toCardArr(['H9','C8','D7']), turn: toCardArr(['H6']), river: toCardArr(['C6']) };
		output = this.rankPlayers(this.g.board, this.g.players.slice(0,5));
		expect(JSON.stringify(output)).toBe(JSON.stringify( [[4],[0,1,2,3]] ));
		// ------------------------------------------------------------------
		this.g.players[0].assignHand(toCardArr(['D8','D9']));
		this.g.players[1].assignHand(toCardArr(['D4','D3']));
		this.g.players[2].assignHand(toCardArr(['H5','S2']));
		this.g.players[3].assignHand(toCardArr(['C7','H7']));
		this.g.players[4].assignHand(toCardArr(['C6','H6']));
		this.g.players[5].assignHand(toCardArr(['DT','DJ']));
		this.g.players[6].assignHand(toCardArr(['S9','H8']));
		this.g.players[7].assignHand(toCardArr(['S8','C4']));
		this.g.players[8].assignHand(toCardArr(['H4','C3']));
		this.g.players[9].assignHand(toCardArr(['SA','H3']));
		this.g.board = { flop: toCardArr(['D5','S5','C5']), turn: toCardArr(['D6']), river: toCardArr(['D7']) };
		output = this.rankPlayers(this.g.board, this.g.players);
		expect(JSON.stringify(output)).toBe(JSON.stringify( [[0],[1],[2],[3],[4],[5],[6],[7],[8],[9]] ));			
	});
})