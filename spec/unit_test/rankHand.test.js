var testCard = require('../../src/utiljs/card');
var testRank = require('../../src/utiljs/rank');
var testPlayer = require('../../src/utiljs/player');
var testGame = require('../../src/utiljs/game');

var CardModule = testCard.CardModule;
var RankModule = testRank.RankModule;
var PlayerModule = testPlayer.PlayerModule;
var GameModule = testGame.GameModule;
var toCardArr = CardModule.toCardArr;

xdescribe('rankHand', function(){
	beforeAll(function(){
		this.rankHand = RankModule.rankHand;
	});
	it('should sort seven card according to value', function(){
		var sortCard = RankModule.sortCard;
		var original = toCardArr([ 'SA', 'ST', 'S2', 'SK', 'S5', 'S7', 'S8' ]);
		var sorted = toCardArr([ 'SA', 'SK', 'ST', 'S8', 'S7', 'S5', 'S2' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'SA', 'SA', 'SA', 'SA', 'SA']);
		sorted = toCardArr([ 'SA', 'SA', 'SA', 'SA', 'SA']);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'SA', 'S2', 'S3', 'S4', 'S5', 'S5', 'S5' ]);
		sorted = toCardArr([ 'SA', 'S5', 'S5', 'S5', 'S4', 'S3', 'S2' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'S9', 'S8', 'ST', 'S3', 'SK', 'S5', 'SA' ]);
		sorted = toCardArr([ 'SA', 'SK', 'ST', 'S9', 'S8', 'S5', 'S3' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'S9', 'S8', 'C9', 'S3', 'SK']);
		sorted = toCardArr([ 'SK', 'S9', 'C9', 'S8', 'S3' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );
		original = toCardArr([ 'SA', 'SK', 'CA', 'CK', 'HA', 'HK', 'DA' ]);
		sorted = toCardArr([ 'SA', 'CA', 'HA', 'DA', 'SK', 'CK', 'HK' ]);
		expect(  JSON.stringify(sortCard(original)) ).toBe( JSON.stringify(sorted) );			
	});
	it('should return five numbers if straight exist, otherwise empty array', function(){
		var checkStraight = RankModule.checkStraight;
		var cards = toCardArr([ 'SA', 'SK', 'SQ', 'SJ', 'ST', 'CT', 'HT' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([1,13,12,11,10]) );
		cards = toCardArr([ 'CK', 'SK', 'SQ', 'SJ', 'S9', 'C9', 'H9' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'SA', 'SQ', 'HJ', 'ST', 'S9', 'C8', 'H7' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([12,11,10,9,8]) );		
		cards = toCardArr([ 'HA', 'S7', 'H7', 'S5', 'H4', 'S3', 'C2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([5,4,3,2,1]) );
		cards = toCardArr([ 'HA', 'S7', 'H6', 'S5', 'H4', 'S3', 'C2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([7,6,5,4,3]) );		
		cards = toCardArr([ 'S4', 'H4', 'S3', 'H3', 'S2', 'C2', 'H2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'HA', 'S5', 'H4', 'S3', 'H3', 'S2', 'C2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([5,4,3,2,1]) );
		cards = toCardArr([ 'SA', 'HK', 'ST', 'H4', 'S4', 'C3', 'H2' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([]) );
		cards = toCardArr([ 'SA', 'SK', 'SQ', 'SJ', 'ST', 'S9', 'S8' ]);
		expect( JSON.stringify(checkStraight(cards)) ).toBe( JSON.stringify([1,13,12,11,10]) );
	});
	it('should return array of card with max suit if flush exists, otherwise return []', function(){
		var checkFlush = RankModule.checkFlush;
		var cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'CT', 'HT']);
		var target = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(target) );
		cards = toCardArr(['SA', 'SK', 'CQ', 'SJ', 'ST', 'CT', 'HT']);
		target = toCardArr([]);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(target) );
		cards = toCardArr(['SA', 'SK', 'SQ', 'SJ']);
		target = toCardArr([]);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(target) );	
		cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		target = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(target) );
		cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'S9', 'S8']);
		target = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'S9', 'S8']);
		expect( JSON.stringify(checkFlush(cards)) ).toBe( JSON.stringify(target) );	
	});	
	it('should return straight flush', function(){
		var cards = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST', 'CT', 'HT']);
		var target = toCardArr(['SA', 'SK', 'SQ', 'SJ', 'ST']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(0);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1]) );
		cards = toCardArr(['SA', 'SK', 'CQ', 'SJ', 'ST', 'CT', 'HT']);
		target = toCardArr([]);
		output = this.rankHand(cards);
		expect( output.category ).not.toBe(0);
		cards = toCardArr(['SA', 'SK', 'SQ', 'S5', 'S4', 'S3', 'S2']);
		target = toCardArr(['SA', 'S5', 'S4', 'S3', 'S2']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(0);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([5]) );
		cards = toCardArr(['SA', 'S7', 'S6', 'S5', 'S4', 'S3', 'S2']);
		target = toCardArr(['S7', 'S6', 'S5', 'S4', 'S3']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(0);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([7]) );
	});
	it('should return four of kind', function(){
		var cards = toCardArr(['SA', 'HA', 'CA', 'DA', 'ST', 'S9', 'S8']);
		var target = toCardArr(['SA', 'HA', 'CA', 'DA', 'ST']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(1);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1, 10]) );
		cards = toCardArr(['SQ', 'HT', 'C9', 'D2', 'S2', 'H2', 'C2']);
		target = toCardArr(['SQ', 'D2', 'S2', 'H2', 'C2']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(1);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([2, 12]) );		
		cards = toCardArr([ 'CA', 'SA', 'DQ', 'ST', 'H6', 'C3', 'S2']);
		target = toCardArr([]);
		output = this.rankHand(cards);
		expect( output.category ).not.toBe(1);
	});
	it('should return fullhouse', function(){
		var cards = toCardArr(['SA', 'HA', 'CA', 'DT', 'ST', 'S9', 'S8']);
		var target = toCardArr(['SA', 'HA', 'CA', 'DT', 'ST']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(2);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1, 10]) );
		cards = toCardArr(['SQ', 'HT', 'C9', 'D9', 'S2', 'H2', 'C2']);
		target = toCardArr(['C9', 'D9', 'S2', 'H2', 'C2']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(2);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([2, 9]) );
		cards = toCardArr(['SQ', 'H9', 'C9', 'D9', 'S2', 'H2', 'C2']);
		target = toCardArr(['H9', 'C9', 'D9', 'S2', 'H2']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(2);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([9, 2]) );
		cards = toCardArr([ 'H9', 'C9', 'D9', 'S4', 'H4', 'H2', 'C2']);
		target = toCardArr(['H9', 'C9', 'D9', 'S4', 'H4',]);
		output = this.rankHand(cards);
		expect( output.category ).toBe(2);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([9, 4]) );
		cards = toCardArr([ 'H9', 'C9', 'D4', 'S4', 'H4', 'H2', 'C2']);
		target = toCardArr(['H9', 'C9', 'D4', 'S4', 'H4',]);
		output = this.rankHand(cards);
		expect( output.category ).toBe(2);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([4, 9]) );			
		cards = toCardArr(['S9', 'H9', 'C9', 'D9', 'S2', 'H2', 'C2']);
		output = this.rankHand(cards);
		expect( output.category ).not.toBe(2);		
	});
	it('should return flush', function(){
		var cards = toCardArr(['SA', 'HK', 'SQ', 'DT', 'ST', 'S9', 'S8']);
		var target = toCardArr(['SA', 'SQ', 'ST', 'S9', 'S8']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(3);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1]) );
		cards = toCardArr(['SA', 'SK', 'SQ', 'ST', 'S9', 'S7', 'S2']);
		target = toCardArr(['SA', 'SK', 'SQ', 'ST', 'S9']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(3);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1]) );
		cards = toCardArr(['SA', 'SQ', 'SJ', 'ST', 'S9', 'S8', 'S2']);
		target = toCardArr(['SQ', 'SJ', 'ST', 'S9', 'S8']);
		output = this.rankHand(cards);
		expect( output.category ).not.toBe(3);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		cards = toCardArr(['CK', 'HK', 'SK', 'ST', 'S9', 'S8', 'S2']);
		target = toCardArr(['SK', 'ST', 'S9', 'S8', 'S2']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(3);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );					
	});
	it('should return straight', function(){
		var cards = toCardArr(['SA', 'HK', 'SQ', 'DJ', 'ST', 'H8', 'C2']);
		var target = toCardArr(['SA', 'HK', 'SQ', 'DJ', 'ST']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(4);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1]) );
		cards = toCardArr(['SA', 'HK', 'SJ', 'D5', 'S4', 'H3', 'C2']);
		target = toCardArr(['SA', 'D5', 'S4', 'H3', 'C2']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(4);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([5]) );
		cards = toCardArr(['SA', 'H7', 'S6', 'D5', 'S4', 'H3', 'C2']);
		target = toCardArr(['H7', 'S6', 'D5', 'S4', 'H3']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(4);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([7]) );
		cards = toCardArr(['SA', 'S7', 'S6', 'S5', 'S4', 'H3', 'C2']);
		target = toCardArr(['H7', 'S6', 'D5', 'S4', 'H3']);
		output = this.rankHand(cards);
		expect( output.category ).not.toBe(4);											
	});
	it('should return three of a kind', function(){
		var cards = toCardArr(['SA', 'HK', 'SQ', 'DJ', 'SJ', 'HJ', 'C2']);
		var target = toCardArr(['SA', 'HK', 'DJ', 'SJ', 'HJ']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(5);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([11,1,13]) );
		cards = toCardArr(['SA', 'HA', 'SJ', 'D5', 'S5', 'H5', 'C2']);
		target = toCardArr(['SA', 'D5', 'S4', 'H3', 'C2']);
		output = this.rankHand(cards);
		expect( output.category ).not.toBe(5);											
	});
	it('should return two pairs', function(){
		var cards = toCardArr(['SA', 'HA', 'SQ', 'DJ', 'SJ', 'H3', 'C2']);
		var target = toCardArr(['SA', 'HA', 'SQ', 'DJ', 'SJ']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(6);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1,11,12]) );
		cards = toCardArr(['SA', 'HA', 'SQ', 'HQ', 'DJ', 'SJ', 'C2']);
		target = toCardArr(['SA', 'HA', 'SQ', 'HQ', 'DJ']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(6);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1,12,11]) );												
	});
	it('should return one pair', function(){
		var cards = toCardArr(['SA', 'HA', 'SQ', 'DJ', 'ST', 'H3', 'C2']);
		var target = toCardArr(['SA', 'HA', 'SQ', 'DJ', 'ST']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(7);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1,12,11,10]) );
		cards = toCardArr(['SA', 'HK', 'SQ', 'DJ', 'S8', 'H2', 'C2']);
		target = toCardArr(['SA', 'HK', 'SQ', 'H2', 'C2']);
		output = this.rankHand(cards);
		expect( output.category ).toBe(7);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([2,1,13,12]) );											
	});
	it('should return high card', function(){
		var cards = toCardArr(['SA', 'HK', 'SQ', 'D9', 'S7', 'H3', 'C2']);
		var target = toCardArr(['SA', 'HK', 'SQ', 'D9', 'S7']);
		var output = this.rankHand(cards);
		expect( output.category ).toBe(8);
		expect( JSON.stringify(output.cards) ).toBe( JSON.stringify(target) );
		expect( JSON.stringify(output.ranker) ).toBe( JSON.stringify([1,13,12,9,7]) );										
	});
})